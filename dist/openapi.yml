openapi: "3.0.0"
info:
  title: Simple API overview
  version: 1.0.0
components:
  schemas:
    Client:
      type: 'object'
      properties:
        id: 
          type: integer
          example: 278
        name:
          type: string
          example: "DoctorDoctor Pty Ltd"
        office:
          type: string
          nullable: true
          example: "Richmond"
    Tranche:
      type: object
      properties:
        id:
          type: integer
          example: 4889
        name:
          type: string
          example: Cisco renewal due 28 June 2022
        type:
          $ref: '#/components/schemas/TrancheType'
    Task:
      type: object
      properties:
        id:
          type: integer
          example: 10923874
        name:
          type: string
          example: Medical Director Configuration
        type:
          $ref: '#/components/schemas/TaskType'
    TaskType:
      type: string
      enum:
        - job
        - ticket
    TrancheType:
      type: string
      enum:
        - project
        - "opportunity"
        - contract
    Personnel:
      type: object
      properties:
        id:
          type: integer
          example: 1293874
        name:
          type: string
          example: Karin Hollands
        rateRoles:
          type: array
          items:
            $ref: "#/components/schemas/RateRole"
    WorkLocation:
      type: object
      properties:
        id:
          type: integer
          example: 29384709
        name:
          type: string
          example: Head Office
    RateType:
      type: object
      properties:
        id:
          type: integer
          example: 92138749
        name:
          type: string
          example: Overtime
        multiplier:
          type: number
          format: float
          description: "Rate Type multiplier to multiply the baseline rate."
          example: 1.75
    RateRole:
      type: object
      properties:
        id:
          type: integer
          example: 209348712
        name:
          type: string
          example: "Developer"
        rate:
          type: number
          format: float
          description: "Baseline rate in $/hr."
          example: 50.75
    Date:
      type: string
      format: string
      description: "A date in ISO8601 format."
      example: '2021-08-12'
    WorksheetUpsertBody:
      type: object
      properties:
        clientId:
          type: integer
        trancheId:
          type: integer
        trancheType:
          $ref: '#/components/schemas/TrancheType'
        taskId:
          type: integer
        taskType:
          $ref: '#/components/schemas/TaskType'
        personnelId:
          type: integer
        workLocationId:
          type: integer
        rateRoleId:
          type: integer
        rateTypeId:
          type: integer
        description:
          type: string
          example: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum
        timeSpent:
          $ref: '#/components/schemas/HourAndMinuteDuration'
        timeCharged:
          $ref: '#/components/schemas/HourAndMinuteDuration'
    HourAndMinuteDuration:
      type: string
      format: duration
      description: "A duration in ISO8601 format containing only hours and minutes."
      example: "P4H36M"

  parameters:
    PaginationLimit:
      name: "limit"
      in: "query"
      description: "Pagination parameter. Number of rows to receive in response. E.g. ?limit=20 means respond with 20 objects."
      schema:
        type: integer
        example: 20
    PaginationOffset:
      name: "offset"
      in: "query"
      description: "Pagination parameter. Which row to start at when retrieving. E.g. offset=100 retrieves starting from the 100th object (first object starts at 1)"
      schema:
        type: integer
        example: 50
    SearchQuery:
      name: "q"
      in: "query"
      description: "Search parameter. Search on relevant fields. Substring search. E.g. unno Para would return Munno Para Foodland"
      schema:
        type: string
        example: Munno Para

paths:
  /clients:
    get:
      operationId: listVersionsv2
      summary: "Paginated retrieval of clients. In terms of the schema this is the dot product of Organizations and Office."
      description: "QUESTIONS: Pagination or searching client side?"
      parameters:
        - 
          $ref: "#/components/parameters/PaginationLimit"
        - 
          $ref: '#/components/parameters/PaginationOffset'
        - 
          $ref: '#/components/parameters/SearchQuery'
      tags:
        - basic
      responses:
        '200':
          description: 200 response
          content:
            application/json: 
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/Client'
              examples: 
                'Get all clients': 
                  value:
                    [
                      {
                        "id": 1,
                        "name": "Comunet",
                        "office": "Adelaide Office"
                      },
                      {
                        "id": 2,
                        "name": "National Medical Services Group Pty Ltd",
                        "office": "Melbourne"
                      },
                      {
                        "id": 3,
                        "name": "Alexander & Symonds Pty Ltd",
                        "office": "Head Office"
                      },
                      {
                        "id": 4,
                        "name": "Seeley International Pty Ltd",
                        "office": "Lonsdale"
                      },
                      {
                        "id": 5,
                        "name": "Thomson Geer",
                        "office": null
                      },
                      {
                        "id": 6,
                        "name": "Royal Flying Doctor - SE Section",
                        "office": "RFDS Broken Hill"
                      },
                      {
                        "id": 7,
                        "name": "ACH Group",
                        "office": "Head Office"
                      },
                      {
                        "id": 8,
                        "name": "Munno Para Foodland",
                        "office": null
                      },
                      {
                        "id": 9,
                        "name": "DoctorDoctor Pty Ltd",
                        "office": "Richmond"
                      }
                    ]
  '/clients/{clientId}': 
    get:
      summary: Retrieve a client object
      tags:
        - basic
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
  '/clients/{clientId}/tranches':
    get:
      parameters:
        - 
          $ref: "#/components/parameters/PaginationLimit"
        - 
          $ref: '#/components/parameters/PaginationOffset'
        - 
          $ref: '#/components/parameters/SearchQuery'
      summary: Retrieve all tranches (projects, opportunites and contracts) associated with a client
      tags:
        - basic
      description: "QUESTION: Pagination or client-side search?<br>QUESTION: Combined resource vs split resource? E.g. /projects, /opportunities, /contracts"
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/Tranche'
  '/tranches/{trancheType}/{tranceId}/tasks':
    get:
      summary: Retrieve tasks associated with tranche (projects, opportunites and contracts)
      tags:
        - basic
      parameters:
        - 
          $ref: "#/components/parameters/PaginationLimit"
        - 
          $ref: '#/components/parameters/PaginationOffset'
        - 
          $ref: '#/components/parameters/SearchQuery'
        - 
          name: "trancheType"
          required: true
          in: path
          schema:
            $ref: '#/components/schemas/TrancheType'
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/Task'
  /personnel:
    get:
      summary: Retrieve all personnel
      tags:
        - basic
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/Personnel'
  /work-locations:
    get:
      summary: Retrieve all work locations
      tags:
        - basic
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/WorkLocation'
  /rate-types:
    get:
      summary: Retrieve all rate types
      tags:
        - basic
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/RateType'
  '/personnel/{personnelId}/worksheets':
    get:
      summary: Retrieve all worksheets for a personnel at a particular date
      tags:
        - basic
      parameters:
        -
          name: "date"
          in: "query"
          required: true
          description: "Date in ISO8601 format."
          schema:
            $ref: '#/components/schemas/Date'
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/WorksheetUpsertBody'
  '/worksheets':
    post:
      summary: Create a worksheet
      tags:
        - basic
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorksheetUpsertBody'
      responses:
        '201':
          description: 201 Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorksheetUpsertBody'
  '/worksheets/{worksheetId}':
    put:
      summary: Update a worksheet
      tags:
        - basic
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorksheetUpsertBody'
      responses:
        '200':
          description: 200 success  
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorksheetUpsertBody'
    delete:
      summary: Delete a worksheet
      tags:
        - basic
      responses:
        '204':
          description: 204 success with no content