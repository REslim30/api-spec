openapi: "3.0.0"
info:
  title: Simple API overview
  version: 1.0.0
components:
  schemas:
    Client:
      type: 'object'
      properties:
        id: 
          type: integer
          example: 278
        name:
          type: string
          example: "DoctorDoctor Pty Ltd"
        office:
          type: string
          nullable: true
          example: "Richmond"
    ProjectSummary:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
          example: Cisco renewal due 28 June 2022
    OpportunitiesSummary:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
          example: Cisco renewal due 28 June 2022
    ContractSummary:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          example: Cisco renewal due 28 June 2022
    Project:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
          example: Cisco renewal due 28 June 2022
        tickets:
          type: array
          items:
            $ref: "#/components/schemas/Job"
        jobs:
          type: array
          items:
            $ref: "#/components/schemas/Job"
    Opportunity:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
          example: Cisco renewal due 28 June 2022
        tickets:
          type: array
          items:
            $ref: "#/components/schemas/Job"
        jobs:
          type: array
          items:
            $ref: "#/components/schemas/Job"
    Contract:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
          example: Cisco renewal due 28 June 2022
        tickets:
          type: array
          items:
            $ref: "#/components/schemas/Job"
        jobs:
          type: array
          items:
            $ref: "#/components/schemas/Job"
    Job:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          example: Medical Director Configuration
        
    Ticket:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          example: Medical Director Configuration
        
    TaskType:
      type: string
      enum:
        - job
        - ticket
    NullableTaskType:
      type: string
      enum:
        - job
        - ticket
      nullable: true
      example: null

    TrancheType:
      type: string
      enum:
        - project
        - "opportunity"
        - contract
    NullableTrancheType:
      type: string
      enum:
        - project
        - "opportunity"
        - contract
      nullable: true
      example: null
    Personnel:
      type: object
      properties:
        id:
          type: integer
          example: 1293874
        name:
          type: string
          example: Karin Hollands
        rateRoles:
          type: array
          items:
            $ref: "#/components/schemas/RateRole"
    WorkLocation:
      type: object
      properties:
        id:
          type: integer
          example: 29384709
        name:
          type: string
          example: Head Office
    RateType:
      type: object
      properties:
        id:
          type: integer
          example: 92138749
        name:
          type: string
          example: Overtime
        multiplier:
          type: number
          format: float
          description: "Rate Type multiplier to multiply the baseline rate."
          example: 1.75
    RateRole:
      type: object
      properties:
        id:
          type: integer
          example: 209348712
        name:
          type: string
          example: "Developer"
        rate:
          type: number
          format: float
          description: "Baseline rate in $/hr."
          example: 50.75
    Date:
      type: string
      format: string
      description: "A date in ISO8601 format."
      example: '2021-08-12'
    WorksheetUpsertBody:
      type: object
      properties:
        clientId:
          type: integer
        trancheId:
          type: integer
        trancheType:
          $ref: '#/components/schemas/TrancheType'
        taskId:
          type: integer
        taskType:
          $ref: '#/components/schemas/TaskType'
        personnelId:
          type: integer
        workLocationId:
          type: integer
        rateRoleId:
          type: integer
        rateTypeId:
          type: integer
        description:
          type: string
          example: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum
        timeSpent:
          $ref: '#/components/schemas/HourAndMinuteDuration'
        timeCharged:
          $ref: '#/components/schemas/HourAndMinuteDuration'
      required:
        - "clientId"
        - trancheId
        - trancheType
        - taskId
        - taskType
        - personnelId
        - workLocationId
        - rateRoleId
        - rateTypeId
        - description
        - timeSpent
        - timeCharged
    TemporaryWorksheet:
      type: object
      properties:
        timeSpent:
          $ref: '#/components/schemas/HourAndMinuteDuration'
        name:
          type: string
          example: Job for Munno Para
          nullable: true
        notes:
          type: string
          format: html
          example: <br>Lorem ipsum dolor sit</br> amet, <h1>consectetur adipiscing</h1> elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum
          nullable: true
        clientId:
          type: integer
          nullable: true
          example: null
        trancheId:
          type: integer
          nullable: true
          example: null
        trancheType:
          $ref: '#/components/schemas/NullableTrancheType'
          nullable: true
          example: null
        taskId:
          type: integer
          nullable: true
          example: null
        taskType:
          $ref: '#/components/schemas/NullableTaskType'
          nullable: true
          example: null
        personnelId:
          type: integer
          nullable: true
          example: null
        workLocationId:
          type: integer
          nullable: true
          example: null
        rateRoleId:
          type: integer
          nullable: true
          example: null
        rateTypeId:
          type: integer
          nullable: true
          example: null
        description:
          type: string
          nullable: true
          example: null
        timeCharged:
          $ref: '#/components/schemas/NullableHourAndMinuteDuration'
          nullable: true
          example: null
      required:
        - "timeSpent"

    HourAndMinuteDuration:
      type: string
      format: duration
      description: "A duration in ISO8601 format containing only hours and minutes."
      example: "P4H36M"
    NullableHourAndMinuteDuration:
      type: string
      format: duration
      description: "A duration in ISO8601 format containing only hours and minutes."
      nullable: true
      example: null
    Timer:
      type: object
      properties:
        id:
          type: integer
          example: 1039247
        totalDuration:
          $ref: '#/components/schemas/HourAndMinuteDuration'
        isRunning:
          type: boolean
          example: true
      required:
        - id
        - "totalDuration"
        - isRunning
    Id:
      type: integer
      example: 1293847

  parameters:
    Date:
      name: 'date'
      in: "query"
      required: true
      description: "Query parameter. Date in ISO8601 format."
      schema:
        $ref: '#/components/schemas/Date'
    ClientFilter:
      name: 'clientId'
      in: "query"
      required: true
      description: "Query parameter to filter by client."
      schema: 
        $ref: "#/components/schemas/Id"
    PersonnelFilter:
      name: 'personnelId'
      in: "query"
      required: true
      description: "Query parameter to filter by personnel."
      schema:
        $ref: "#/components/schemas/Id"

paths:
  /clients:
    get:
      operationId: listVersionsv2
      summary: "Retrieval of clients."
      tags:
        - basic
      responses:
        '200':
          description: 200 response
          content:
            application/json: 
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/Client'
              examples: 
                'Get all clients': 
                  value:
                    [
                      {
                        "id": 1,
                        "name": "Comunet",
                        "office": "Adelaide Office"
                      },
                      {
                        "id": 2,
                        "name": "National Medical Services Group Pty Ltd",
                        "office": "Melbourne"
                      },
                      {
                        "id": 3,
                        "name": "Alexander & Symonds Pty Ltd",
                        "office": "Head Office"
                      },
                      {
                        "id": 4,
                        "name": "Seeley International Pty Ltd",
                        "office": "Lonsdale"
                      },
                      {
                        "id": 5,
                        "name": "Thomson Geer",
                        "office": null
                      },
                      {
                        "id": 6,
                        "name": "Royal Flying Doctor - SE Section",
                        "office": "RFDS Broken Hill"
                      },
                      {
                        "id": 7,
                        "name": "ACH Group",
                        "office": "Head Office"
                      },
                      {
                        "id": 8,
                        "name": "Munno Para Foodland",
                        "office": null
                      },
                      {
                        "id": 9,
                        "name": "DoctorDoctor Pty Ltd",
                        "office": "Richmond"
                      }
                    ]
  '/clients/{clientId}': 
    get:
      summary: Retrieve a client object
      tags:
        - basic
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
  '/projects':
    get:
      summary: "filtered route to get projects. (Retrieval via clientId is only required)"
      tags:
        - basic
      parameters:
        - 
          $ref: "#/components/parameters/ClientFilter"
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSummary'
  '/projects/{projectId}':
    get:
      summary: Retrieve aggregated projects object
      tags:
        - basic
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/Project'
  
  '/opportunties':
    get:
      summary: "filtered route to get opportunities. (Retrieval via clientId is only required)"
      tags:
        - basic
      parameters:
        - 
          $ref: "#/components/parameters/ClientFilter"
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpportunitiesSummary'

  '/opportunity/{opportunityId}':
    get:
      summary: Retrieve aggregated projects object
      tags:
        - basic
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/Opportunity'
      
  '/contract':
    get:
      summary: "filtered route to get contracts. (Retrieval via clientId is only required)"
      tags:
        - basic
      parameters:
        - 
          $ref: "#/components/parameters/ClientFilter"
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractSummary'

  '/contracts/{contractId}':
    get:
      summary: Retrieve aggregated contract object
      tags:
        - basic
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/Contract'
  

  /personnel:
    get:
      summary: Retrieve all personnel
      tags:
        - basic
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/Personnel'
  /work-locations:
    get:
      summary: Retrieve all work locations
      tags:
        - basic
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/WorkLocation'
  /rate-types:
    get:
      summary: Retrieve all rate types
      tags:
        - basic
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/RateType'
  '/worksheets':
    parameters:
      - $ref: '#/components/parameters/Date'
    post:
      summary: Create a worksheet
      tags:
        - basic
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorksheetUpsertBody'
      responses:
        '201':
          description: 201 Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorksheetUpsertBody'
    get:
      summary: Retrieve all worksheets for a personnel at a particular date for a particular personnel
      tags:
        - basic
      parameters:
        - $ref: '#/components/parameters/Date' 
        - $ref: '#/components/parameters/PersonnelFilter'
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/WorksheetUpsertBody'
  '/worksheets/{worksheetId}':
    put:
      summary: Update a worksheet
      tags:
        - basic
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorksheetUpsertBody'
      responses:
        '200':
          description: 200 success  
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorksheetUpsertBody'
    delete:
      summary: Delete a worksheet
      tags:
        - basic
      responses:
        '204':
          description: 204 success with no content
  '/temporary-worksheet':
    post:
      parameters:
        - $ref: '#/components/parameters/Date'
      summary: Create a temporary worksheet
      tags:
        - temporary worksheets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemporaryWorksheet'
      responses:
        '201':
          description: 201 Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemporaryWorksheet'
    get:
      parameters:
        - $ref: '#/components/parameters/Date'
      summary: Retrieve all temporary worksheets
      tags:
        - temporary worksheets
      responses:
        '200':
          description: 200 Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TemporaryWorksheet'
  '/temporary-worksheet/{temporaryWorksheetId}':
    get:
      summary: Retrieve a single temporary worksheet
      tags:
        - temporary worksheets
      responses:
        '200':
          description: 200 success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemporaryWorksheet'

    put:
      summary: Update a temporary worksheet
      tags:
        - temporary worksheets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemporaryWorksheet'
      responses:
        '200':
          description: 200 Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemporaryWorksheet'
    delete:
      summary: Delete a temporary worksheet
      tags:
        - temporary worksheets
      responses:
        '204':
          description: 204 No Content
  '/timer':
    post:
      parameters:
        - $ref: '#/components/parameters/Date'
      summary: "create a timer"
      tags:
        - timer
      responses:
        '200':
          description: 200 Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timer'
    get:
      parameters:
        - $ref: '#/components/parameters/Date'
      summary: "retrieve all users timers"
      tags:
        - timer
      responses:
        '200':
          description: 200 Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Timer'
  '/timer/{timerId}':
    get:
      summary: "retreive a timer"
      tags:
        - timer
      responses:
        '200':
          description: 200 Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timer'
    delete:
      summary: "delete a timer"
      tags:
        - timer
      responses:
        '200':
          description: 200 Success
  '/timer/{timerId}/start':
    put:
      summary: 'start a timer'
      tags:
        - timer
      responses:
        '200':
          description: 200 Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Timer'
  '/timer/{timerId}/stop':
    put:
      summary: 'start a timer'
      tags:
        - timer
      responses:
        '200':
          description: 200 Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Timer'